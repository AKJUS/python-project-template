[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.18.1"
mypy = "^0.942"
isort = "^5.10.1"
black = {version = "^22.3.0", allow-prereleases = true}
xdoctest = "^1.0.0"
Pygments = "^2.11.2"
darglint = "^1.8.1"
pdoc3 = "^0.10.0"
cookiecutter = "^1.7.3"
pylint = "^2.13.4"
poethepoet = "^0.16.4"
flake8 = "^4.0.1"
pep8-naming = "^0.12.1"
flake8-docstrings = "^1.6.0"
flake8-todos = "^0.1.5"
flake8-secure-coding-standard = "^1.2.1"
flake8-logging-format = "^0.6.0"
flake8-builtins = "^1.5.3"
flake8-pytest-style = "^1.6.0"
flake8-bugbear = "^22.3.23"
flake8-bandit = "^3.0.0"
flake8-annotations = "^2.8.0"
flake8-black = "^0.3.2"
pytest = "7.1.1"
pytest-html = "^3.1.1"
pytest-sugar = "^0.9.6"
pytest-flake8 = "^1.1.1"
pytest-reverse = "^1.5.0"
pytest-cov = "^3.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 79

[tool.black]
line-length = 79
target-version = ['py38']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--verbose --flake8 --reverse --color=yes --cov={{cookiecutter.package_name}} --html=docs/pytest_report.html --self-contained-html --cov-fail-under=100 --cov-report term-missing --cov-report html:docs/cov-report --doctest-modules --cov-config=pyproject.toml"
testpaths = [
    "tests",
    "{{cookiecutter.package_name}}"
]
python_files = ["*_test.py"]
python_functions = ["test_*"]
render_collapsed = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
    ]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_unused_ignores = true
show_error_context = true
error_summary = true
pretty = true

[tool.poe.tasks]
install = "poetry install --only main"
install-dev = "poetry install"
run = "poetry run python -m {{cookiecutter.package_name}}.{{cookiecutter.module_name}}"
test = "poetry run pytest"
pre-commit = "poetry run pre-commit run --all-files"
lint = "poetry run flake8"
doc = "poetry run pdoc --html . --force --output-dir docs/api"
build = "docker build -t {{cookiecutter.package_name}}:latest ."
